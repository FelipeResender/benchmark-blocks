<#@ template language="C#" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

using NUnit.Framework;
using Quantum;
using Unity.PerformanceTesting;
using UnityEngine;
using UnityEngine.TestTools;

using Assert = NUnit.Framework.Assert;
using ComponentTest001 = Quantum.Transform2D;

namespace Tests {
  public class PerfTestJustWith : PerfTestBase {
<#
    var componentTypes = new List<string>();
    for (int i = 30; i < 256; i = (i + 64) & ~63) {
        var componentType = $"ComponentTest{i:D3}";
        componentTypes.Add(componentType);
    }

    foreach (var percent in new[] { 100, 20, 5 }) {
        for (int i = 0; i < componentTypes.Count; ++i) {
            var type0 = componentTypes[i];
            GenerateTest(percent, type0);
            for(int j = i + 1; j < componentTypes.Count; ++j) {
                var type1 = componentTypes[j];
                GenerateTest(percent, type0, type1);
                for(int k = j + 1; k < componentTypes.Count; ++k) {
                    var type2 = componentTypes[k];
                    GenerateTest(percent, type0, type1, type2);
                    for(int l = k + 1; l < componentTypes.Count; ++l) {
                        var type3 = componentTypes[l];
                        GenerateTest(percent, type0, type1, type2, type3);
                    }
                }
            }
        }
    }
#>


  }
}

<#+   // Start of class feature block

    private void GenerateTest(int percent, params string[] types)
    {
        var genericParams = $"<{string.Join(", ", types)}>";
        WriteLine($"    [Test, Performance, TestCaseSource(nameof(DefaultTestParameters))]");
        WriteLine($"    public void {GetCardinalityName(types.Length)}_{percent}Percent_{string.Join("_", types)}(TestParams t) => RunTest(");
        WriteLine($"      MakeSimpleFilter{genericParams}(), ");
        WriteLine($"      f => SimpleSetUp(f, t, (ComponentSet.Create{genericParams}(), {percent / 100.0f}f))");
        WriteLine($"    );");
    }

    string GetCardinalityName(int num)
    {
        switch (num) {
            case 1: return "Single";
            case 2: return "Pair";
            case 3: return "Triplet";
            case 4: return "Quartet";
            default:
                throw new NotSupportedException();
        }
    }
#>