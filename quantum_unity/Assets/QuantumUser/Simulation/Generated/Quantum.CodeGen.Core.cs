// <auto-generated>
// This code was auto-generated by a tool, every time
// the tool executes this code will be reset.
//
// If you need to extend the classes generated to add
// fields or methods to them, please create partial
// declarations in another file.
// </auto-generated>
#pragma warning disable 0109
#pragma warning disable 1591


namespace Quantum {
  using Photon.Deterministic;
  using Quantum;
  using Quantum.Core;
  using Quantum.Collections;
  using Quantum.Inspector;
  using Quantum.Physics2D;
  using Quantum.Physics3D;
  using Byte = System.Byte;
  using SByte = System.SByte;
  using Int16 = System.Int16;
  using UInt16 = System.UInt16;
  using Int32 = System.Int32;
  using UInt32 = System.UInt32;
  using Int64 = System.Int64;
  using UInt64 = System.UInt64;
  using Boolean = System.Boolean;
  using String = System.String;
  using Object = System.Object;
  using FlagsAttribute = System.FlagsAttribute;
  using SerializableAttribute = System.SerializableAttribute;
  using MethodImplAttribute = System.Runtime.CompilerServices.MethodImplAttribute;
  using MethodImplOptions = System.Runtime.CompilerServices.MethodImplOptions;
  using FieldOffsetAttribute = System.Runtime.InteropServices.FieldOffsetAttribute;
  using StructLayoutAttribute = System.Runtime.InteropServices.StructLayoutAttribute;
  using LayoutKind = System.Runtime.InteropServices.LayoutKind;
  #if QUANTUM_UNITY //;
  using TooltipAttribute = UnityEngine.TooltipAttribute;
  using HeaderAttribute = UnityEngine.HeaderAttribute;
  using SpaceAttribute = UnityEngine.SpaceAttribute;
  using RangeAttribute = UnityEngine.RangeAttribute;
  using HideInInspectorAttribute = UnityEngine.HideInInspector;
  using PreserveAttribute = UnityEngine.Scripting.PreserveAttribute;
  using FormerlySerializedAsAttribute = UnityEngine.Serialization.FormerlySerializedAsAttribute;
  using MovedFromAttribute = UnityEngine.Scripting.APIUpdating.MovedFromAttribute;
  using CreateAssetMenu = UnityEngine.CreateAssetMenuAttribute;
  using RuntimeInitializeOnLoadMethodAttribute = UnityEngine.RuntimeInitializeOnLoadMethodAttribute;
  #endif //;
  
  [System.FlagsAttribute()]
  public enum InputButtons : int {
  }
  public static unsafe partial class FlagsExtensions {
    public static Boolean IsFlagSet(this InputButtons self, InputButtons flag) {
      return (self & flag) == flag;
    }
    public static InputButtons SetFlag(this InputButtons self, InputButtons flag) {
      return self | flag;
    }
    public static InputButtons ClearFlag(this InputButtons self, InputButtons flag) {
      return self & ~flag;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet128 {
    public const Int32 SIZE = 16;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public fixed UInt64 Bits[2];
    public const Int32 BitsSize = 128;
    public Int32 Length {
      get {
        return 128;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet128*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->Bits, 128, 64, printer);
      printer.ScopeEnd();
    }
    public static BitSet128 FromArray(UInt64[] values) {
      Assert.Always(2 == values.Length, "Invalid array size", values.Length);
      BitSet128 result = default;
      for (int i = 0; i < 2; ++i) {
        result.Bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 128);
      fixed (UInt64* p = Bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 128);
      fixed (UInt64* p = Bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = Bits) Native.Utils.Clear(p, 16);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = Bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 4463;
        fixed (UInt64* p = Bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 2);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet128*)ptr;
        serializer.Stream.SerializeBuffer(&p->Bits[0], 2);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet2048 {
    public const Int32 SIZE = 256;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public fixed UInt64 Bits[32];
    public const Int32 BitsSize = 2048;
    public Int32 Length {
      get {
        return 2048;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet2048*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->Bits, 2048, 64, printer);
      printer.ScopeEnd();
    }
    public static BitSet2048 FromArray(UInt64[] values) {
      Assert.Always(32 == values.Length, "Invalid array size", values.Length);
      BitSet2048 result = default;
      for (int i = 0; i < 32; ++i) {
        result.Bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 2048);
      fixed (UInt64* p = Bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 2048);
      fixed (UInt64* p = Bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = Bits) Native.Utils.Clear(p, 256);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = Bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 3319;
        fixed (UInt64* p = Bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 32);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet2048*)ptr;
        serializer.Stream.SerializeBuffer(&p->Bits[0], 32);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet256 {
    public const Int32 SIZE = 32;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public fixed UInt64 Bits[4];
    public const Int32 BitsSize = 256;
    public Int32 Length {
      get {
        return 256;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet256*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->Bits, 256, 64, printer);
      printer.ScopeEnd();
    }
    public static BitSet256 FromArray(UInt64[] values) {
      Assert.Always(4 == values.Length, "Invalid array size", values.Length);
      BitSet256 result = default;
      for (int i = 0; i < 4; ++i) {
        result.Bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 256);
      fixed (UInt64* p = Bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 256);
      fixed (UInt64* p = Bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = Bits) Native.Utils.Clear(p, 32);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = Bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 14057;
        fixed (UInt64* p = Bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 4);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet256*)ptr;
        serializer.Stream.SerializeBuffer(&p->Bits[0], 4);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet4096 {
    public const Int32 SIZE = 512;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public fixed UInt64 Bits[64];
    public const Int32 BitsSize = 4096;
    public Int32 Length {
      get {
        return 4096;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet4096*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->Bits, 4096, 64, printer);
      printer.ScopeEnd();
    }
    public static BitSet4096 FromArray(UInt64[] values) {
      Assert.Always(64 == values.Length, "Invalid array size", values.Length);
      BitSet4096 result = default;
      for (int i = 0; i < 64; ++i) {
        result.Bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 4096);
      fixed (UInt64* p = Bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 4096);
      fixed (UInt64* p = Bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = Bits) Native.Utils.Clear(p, 512);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = Bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 1433;
        fixed (UInt64* p = Bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 64);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet4096*)ptr;
        serializer.Stream.SerializeBuffer(&p->Bits[0], 64);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet512 {
    public const Int32 SIZE = 64;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public fixed UInt64 Bits[8];
    public const Int32 BitsSize = 512;
    public Int32 Length {
      get {
        return 512;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet512*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->Bits, 512, 64, printer);
      printer.ScopeEnd();
    }
    public static BitSet512 FromArray(UInt64[] values) {
      Assert.Always(8 == values.Length, "Invalid array size", values.Length);
      BitSet512 result = default;
      for (int i = 0; i < 8; ++i) {
        result.Bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 512);
      fixed (UInt64* p = Bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 512);
      fixed (UInt64* p = Bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = Bits) Native.Utils.Clear(p, 64);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = Bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 17491;
        fixed (UInt64* p = Bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 8);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet512*)ptr;
        serializer.Stream.SerializeBuffer(&p->Bits[0], 8);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet6 {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public fixed UInt64 Bits[1];
    public const Int32 BitsSize = 6;
    public Int32 Length {
      get {
        return 6;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet6*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->Bits, 6, 64, printer);
      printer.ScopeEnd();
    }
    public static BitSet6 FromArray(UInt64[] values) {
      Assert.Always(1 == values.Length, "Invalid array size", values.Length);
      BitSet6 result = default;
      for (int i = 0; i < 1; ++i) {
        result.Bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 6);
      fixed (UInt64* p = Bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 6);
      fixed (UInt64* p = Bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = Bits) Native.Utils.Clear(p, 8);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = Bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 13669;
        fixed (UInt64* p = Bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 1);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet6*)ptr;
        serializer.Stream.SerializeBuffer(&p->Bits[0], 1);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [System.SerializableAttribute()]
  public unsafe partial struct QStringUtf8_1024 : IQStringUtf8, System.IEquatable<QStringUtf8_1024> {
    public const Int32 SIZE = 1024;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public UInt16 ByteCount;
    [FieldOffset(2)]
    [FixedBufferDynamicLength("ByteCount")]
    public fixed Byte Bytes[1022];
    public const int MaxByteCount = 1022;
    public QStringUtf8_1024(String str) {
      QStringUtf8.ConstructFrom(str, MaxByteCount, out this);
    }
    public int Length {
      get {
        return QStringUtf8.GetLength(ref this);
      }
    }
    public override System.String ToString() {
      return QStringUtf8.GetString(ref this);
    }
    public static Boolean CanHold(String str) {
      return QStringUtf8.CanHold(str, MaxByteCount);
    }
    Int32 IQStringUtf8.CompareOrdinal(byte* bytes, UInt16 byteCount) {
      return QStringUtf8.CompareOrdinal(ref this, bytes, byteCount);
    }
    public Int32 CompareOrdinal(String str) {
      return QStringUtf8.CompareOrdinal(ref this, str);
    }
    public static implicit operator QStringUtf8_1024(String str) {
      return new QStringUtf8_1024(str);
    }
    public static implicit operator String(QStringUtf8_1024 str) {
      return str.ToString();
    }
    public override Boolean Equals(Object obj) {
      return QStringUtf8.AreEqual(ref this, obj);
    }
    public Boolean Equals(QStringUtf8_1024 str) {
      return QStringUtf8.CompareOrdinal(ref this, str.Bytes, str.ByteCount) == 0;
    }
    public Boolean Equals<T>(ref T str)
      where T : unmanaged, IQStringUtf8 {
      return QStringUtf8.CompareOrdinal(ref this, ref str) == 0;
    }
    public Int32 CompareOrdinal<T>(ref T str)
      where T : unmanaged, IQStringUtf8 {
      return QStringUtf8.CompareOrdinal(ref this, ref str);
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 9181;
        hash = hash * 31 + ByteCount.GetHashCode();
        fixed (Byte* p = Bytes) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, this.ByteCount);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (QStringUtf8_1024*)ptr;
        serializer.Stream.Serialize(&p->ByteCount);
        Assert.Always(p->ByteCount <= 1022, p->ByteCount);
        serializer.Stream.SerializeBuffer(&p->Bytes[0], p->ByteCount);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [System.SerializableAttribute()]
  public unsafe partial struct QStringUtf8_128 : IQStringUtf8, System.IEquatable<QStringUtf8_128> {
    public const Int32 SIZE = 128;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public UInt16 ByteCount;
    [FieldOffset(2)]
    [FixedBufferDynamicLength("ByteCount")]
    public fixed Byte Bytes[126];
    public const int MaxByteCount = 126;
    public QStringUtf8_128(String str) {
      QStringUtf8.ConstructFrom(str, MaxByteCount, out this);
    }
    public int Length {
      get {
        return QStringUtf8.GetLength(ref this);
      }
    }
    public override System.String ToString() {
      return QStringUtf8.GetString(ref this);
    }
    public static Boolean CanHold(String str) {
      return QStringUtf8.CanHold(str, MaxByteCount);
    }
    Int32 IQStringUtf8.CompareOrdinal(byte* bytes, UInt16 byteCount) {
      return QStringUtf8.CompareOrdinal(ref this, bytes, byteCount);
    }
    public Int32 CompareOrdinal(String str) {
      return QStringUtf8.CompareOrdinal(ref this, str);
    }
    public static implicit operator QStringUtf8_128(String str) {
      return new QStringUtf8_128(str);
    }
    public static implicit operator String(QStringUtf8_128 str) {
      return str.ToString();
    }
    public override Boolean Equals(Object obj) {
      return QStringUtf8.AreEqual(ref this, obj);
    }
    public Boolean Equals(QStringUtf8_128 str) {
      return QStringUtf8.CompareOrdinal(ref this, str.Bytes, str.ByteCount) == 0;
    }
    public Boolean Equals<T>(ref T str)
      where T : unmanaged, IQStringUtf8 {
      return QStringUtf8.CompareOrdinal(ref this, ref str) == 0;
    }
    public Int32 CompareOrdinal<T>(ref T str)
      where T : unmanaged, IQStringUtf8 {
      return QStringUtf8.CompareOrdinal(ref this, ref str);
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 18713;
        hash = hash * 31 + ByteCount.GetHashCode();
        fixed (Byte* p = Bytes) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, this.ByteCount);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (QStringUtf8_128*)ptr;
        serializer.Stream.Serialize(&p->ByteCount);
        Assert.Always(p->ByteCount <= 126, p->ByteCount);
        serializer.Stream.SerializeBuffer(&p->Bytes[0], p->ByteCount);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [System.SerializableAttribute()]
  public unsafe partial struct QStringUtf8_512 : IQStringUtf8, System.IEquatable<QStringUtf8_512> {
    public const Int32 SIZE = 512;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public UInt16 ByteCount;
    [FieldOffset(2)]
    [FixedBufferDynamicLength("ByteCount")]
    public fixed Byte Bytes[510];
    public const int MaxByteCount = 510;
    public QStringUtf8_512(String str) {
      QStringUtf8.ConstructFrom(str, MaxByteCount, out this);
    }
    public int Length {
      get {
        return QStringUtf8.GetLength(ref this);
      }
    }
    public override System.String ToString() {
      return QStringUtf8.GetString(ref this);
    }
    public static Boolean CanHold(String str) {
      return QStringUtf8.CanHold(str, MaxByteCount);
    }
    Int32 IQStringUtf8.CompareOrdinal(byte* bytes, UInt16 byteCount) {
      return QStringUtf8.CompareOrdinal(ref this, bytes, byteCount);
    }
    public Int32 CompareOrdinal(String str) {
      return QStringUtf8.CompareOrdinal(ref this, str);
    }
    public static implicit operator QStringUtf8_512(String str) {
      return new QStringUtf8_512(str);
    }
    public static implicit operator String(QStringUtf8_512 str) {
      return str.ToString();
    }
    public override Boolean Equals(Object obj) {
      return QStringUtf8.AreEqual(ref this, obj);
    }
    public Boolean Equals(QStringUtf8_512 str) {
      return QStringUtf8.CompareOrdinal(ref this, str.Bytes, str.ByteCount) == 0;
    }
    public Boolean Equals<T>(ref T str)
      where T : unmanaged, IQStringUtf8 {
      return QStringUtf8.CompareOrdinal(ref this, ref str) == 0;
    }
    public Int32 CompareOrdinal<T>(ref T str)
      where T : unmanaged, IQStringUtf8 {
      return QStringUtf8.CompareOrdinal(ref this, ref str);
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 9257;
        hash = hash * 31 + ByteCount.GetHashCode();
        fixed (Byte* p = Bytes) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, this.ByteCount);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (QStringUtf8_512*)ptr;
        serializer.Stream.Serialize(&p->ByteCount);
        Assert.Always(p->ByteCount <= 510, p->ByteCount);
        serializer.Stream.SerializeBuffer(&p->Bytes[0], p->ByteCount);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Input {
    public const Int32 SIZE = 16;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(8)]
    public Int32 samples;
    [FieldOffset(0)]
    public Int32 grown;
    [FieldOffset(4)]
    public Int32 max;
    [FieldOffset(12)]
    public QBoolean runnig;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 19249;
        hash = hash * 31 + samples.GetHashCode();
        hash = hash * 31 + grown.GetHashCode();
        hash = hash * 31 + max.GetHashCode();
        hash = hash * 31 + runnig.GetHashCode();
        return hash;
      }
    }
    static partial void GetMaxCountCodeGen(ref int maxCount) {
      maxCount = 6;
    }
    public Boolean IsDown(InputButtons button) {
      switch (button) {
        default: return false;
      }
    }
    public Boolean WasPressed(InputButtons button) {
      switch (button) {
        default: return false;
      }
    }
    static partial void SerializeCodeGen(void* ptr, FrameSerializer serializer) {
        var p = (Input*)ptr;
        serializer.Stream.Serialize(&p->grown);
        serializer.Stream.Serialize(&p->max);
        serializer.Stream.Serialize(&p->samples);
        QBoolean.Serialize(&p->runnig, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct _globals_ {
    public const Int32 SIZE = 640;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetRef<Map> Map;
    [FieldOffset(8)]
    public FP DeltaTime;
    [FieldOffset(16)]
    public NavMeshRegionMask NavMeshRegions;
    [FieldOffset(32)]
    public PhysicsEngineState PhysicsState2D;
    [FieldOffset(48)]
    public PhysicsEngineState PhysicsState3D;
    [FieldOffset(64)]
    public RNGSession RngSession;
    [FieldOffset(80)]
    public FrameMetaData FrameMetaData;
    [FieldOffset(120)]
    public BitSet1024 Systems;
    [FieldOffset(248)]
    public PhysicsSceneSettings PhysicsSettings;
    [FieldOffset(528)]
    public Int32 ConnectedPlayerCount;
    [FieldOffset(532)]
    [FramePrinter.FixedArrayAttribute(typeof(Input), 6)]
    private fixed Byte _input_[96];
    [FieldOffset(632)]
    public BitSet6 PlayerLastConnectionState;
    public FixedArray<Input> input {
      get {
        fixed (byte* p = _input_) { return new FixedArray<Input>(p, 16, 6); }
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 12473;
        hash = hash * 31 + Map.GetHashCode();
        hash = hash * 31 + DeltaTime.GetHashCode();
        hash = hash * 31 + NavMeshRegions.GetHashCode();
        hash = hash * 31 + PhysicsState2D.GetHashCode();
        hash = hash * 31 + PhysicsState3D.GetHashCode();
        hash = hash * 31 + RngSession.GetHashCode();
        hash = hash * 31 + FrameMetaData.GetHashCode();
        hash = hash * 31 + Systems.GetHashCode();
        hash = hash * 31 + PhysicsSettings.GetHashCode();
        hash = hash * 31 + ConnectedPlayerCount.GetHashCode();
        hash = hash * 31 + HashCodeUtils.GetArrayHashCode(input);
        hash = hash * 31 + PlayerLastConnectionState.GetHashCode();
        return hash;
      }
    }
    static partial void SerializeCodeGen(void* ptr, FrameSerializer serializer) {
        var p = (_globals_*)ptr;
        AssetRef.Serialize(&p->Map, serializer);
        FP.Serialize(&p->DeltaTime, serializer);
        NavMeshRegionMask.Serialize(&p->NavMeshRegions, serializer);
        PhysicsEngineState.Serialize(&p->PhysicsState2D, serializer);
        PhysicsEngineState.Serialize(&p->PhysicsState3D, serializer);
        RNGSession.Serialize(&p->RngSession, serializer);
        FrameMetaData.Serialize(&p->FrameMetaData, serializer);
        Quantum.BitSet1024.Serialize(&p->Systems, serializer);
        PhysicsSceneSettings.Serialize(&p->PhysicsSettings, serializer);
        serializer.Stream.Serialize(&p->ConnectedPlayerCount);
        FixedArray.Serialize(p->input, serializer, Statics.SerializeInput);
        Quantum.BitSet6.Serialize(&p->PlayerLastConnectionState, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BenchmarkSingleton : Quantum.IComponentSingleton {
    public const Int32 SIZE = 648;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 startedFrame;
    [FieldOffset(4)]
    public QBoolean running;
    [FieldOffset(136)]
    public QStringUtf8_512 path;
    [FieldOffset(8)]
    public QStringUtf8_128 filename;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 13171;
        hash = hash * 31 + startedFrame.GetHashCode();
        hash = hash * 31 + running.GetHashCode();
        hash = hash * 31 + path.GetHashCode();
        hash = hash * 31 + filename.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BenchmarkSingleton*)ptr;
        serializer.Stream.Serialize(&p->startedFrame);
        QBoolean.Serialize(&p->running, serializer);
        Quantum.QStringUtf8_128.Serialize(&p->filename, serializer);
        Quantum.QStringUtf8_512.Serialize(&p->path, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest021 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 19391;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest021*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest022 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 19403;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest022*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest023 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 19417;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest023*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest024 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 19421;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest024*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest025 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 19423;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest025*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest026 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 19427;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest026*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest027 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 19429;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest027*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest028 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 19433;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest028*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest029 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 19441;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest029*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest030 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 19661;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest030*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest031 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 19681;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest031*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest032 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 19687;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest032*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest033 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 19697;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest033*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest034 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 19699;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest034*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest035 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 19709;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest035*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest036 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 19717;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest036*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest037 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 19727;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest037*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest038 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 19739;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest038*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest039 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 19751;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest039*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest040 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 19963;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest040*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest041 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 19973;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest041*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest042 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 19979;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest042*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest043 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 19991;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest043*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest044 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 19993;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest044*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest045 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 19997;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest045*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest046 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 20011;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest046*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest047 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 20021;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest047*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest048 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 20023;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest048*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest049 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 20029;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest049*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest050 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 20233;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest050*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest051 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 20249;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest051*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest052 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 20261;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest052*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest053 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 20269;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest053*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest054 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 20287;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest054*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest055 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 20297;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest055*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest056 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 20323;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest056*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest057 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 20327;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest057*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest058 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 20333;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest058*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest059 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 20341;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest059*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest060 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 20549;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest060*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest061 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 20551;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest061*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest062 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 20563;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest062*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest063 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 20593;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest063*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest064 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 20599;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest064*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest065 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 20611;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest065*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest066 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 20627;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest066*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest067 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 20639;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest067*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest068 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 20641;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest068*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest069 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 20663;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest069*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest070 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 20897;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest070*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest071 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 20899;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest071*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest072 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 20903;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest072*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest073 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 20921;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest073*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest074 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 20929;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest074*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest075 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 20939;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest075*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest076 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 20947;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest076*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest077 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 20959;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest077*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest078 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 20963;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest078*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest079 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 20981;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest079*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest080 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 21179;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest080*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest081 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 21187;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest081*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest082 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 21191;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest082*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest083 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 21193;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest083*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest084 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 21211;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest084*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest085 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 21221;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest085*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest086 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 21227;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest086*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest087 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 21247;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest087*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest088 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 21269;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest088*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest089 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 21277;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest089*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest090 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 47;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest090*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest091 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 53;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest091*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest092 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 59;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest092*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest093 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 61;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest093*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest094 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 67;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest094*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest095 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 71;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest095*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest096 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 73;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest096*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest097 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 79;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest097*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest098 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 83;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest098*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest099 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 89;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest099*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest100 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 5237;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest100*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest101 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 5261;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest101*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest102 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 5273;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest102*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest103 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 5279;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest103*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest104 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 5281;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest104*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest105 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 5297;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest105*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest106 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 5303;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest106*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest107 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 5309;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest107*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest108 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 5323;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest108*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest109 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 5333;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest109*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest110 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 5507;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest110*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest111 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 5519;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest111*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest112 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 5521;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest112*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest113 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 5527;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest113*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest114 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 5531;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest114*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest115 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 5557;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest115*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest116 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 5563;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest116*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest117 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 5569;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest117*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest118 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 5573;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest118*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest119 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 5581;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest119*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest120 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 5783;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest120*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest121 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 5791;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest121*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest122 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 5801;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest122*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest123 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 5807;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest123*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest124 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 5813;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest124*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest125 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 5821;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest125*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest126 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 5827;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest126*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest127 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 5839;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest127*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest128 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 5843;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest128*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest129 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 5849;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest129*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest130 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 6053;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest130*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest131 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 6067;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest131*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest132 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 6073;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest132*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest133 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 6079;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest133*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest134 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 6089;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest134*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest135 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 6091;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest135*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest136 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 6101;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest136*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest137 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 6113;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest137*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest138 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 6121;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest138*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest139 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 6131;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest139*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest140 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 6311;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest140*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest141 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 6317;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest141*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest142 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 6323;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest142*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest143 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 6329;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest143*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest144 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 6337;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest144*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest145 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 6343;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest145*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest146 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 6353;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest146*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest147 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 6359;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest147*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest148 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 6361;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest148*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest149 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 6367;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest149*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest150 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 6581;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest150*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest151 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 6599;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest151*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest152 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 6607;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest152*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest153 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 6619;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest153*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest154 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 6637;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest154*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest155 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 6653;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest155*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest156 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 6659;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest156*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest157 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 6661;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest157*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest158 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 6673;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest158*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest159 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 6679;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest159*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest160 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 6863;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest160*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest161 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 6869;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest161*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest162 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 6871;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest162*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest163 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 6883;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest163*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest164 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 6899;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest164*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest165 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 6907;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest165*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest166 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 6911;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest166*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest167 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 6917;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest167*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest168 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 6947;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest168*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest169 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 6949;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest169*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest170 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 7129;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest170*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest171 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 7151;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest171*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest172 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 7159;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest172*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest173 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 7177;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest173*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest174 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 7187;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest174*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest175 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 7193;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest175*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest176 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 7207;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest176*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest177 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 7211;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest177*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest178 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 7213;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest178*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest179 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 7219;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest179*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest180 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 7459;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest180*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest181 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 7477;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest181*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest182 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 7481;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest182*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest183 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 7487;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest183*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest184 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 7489;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest184*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest185 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 7499;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest185*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest186 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 7507;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest186*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest187 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 7517;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest187*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest188 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 7523;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest188*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest189 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 7529;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest189*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest190 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 7691;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest190*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest191 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 7699;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest191*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest192 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 7703;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest192*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest193 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 7717;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest193*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest194 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 7723;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest194*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest195 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 7727;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest195*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest196 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 7741;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest196*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest197 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 7753;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest197*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest198 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 7757;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest198*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest199 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 7759;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest199*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest200 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 14051;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest200*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest201 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 14057;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest201*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest202 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 14071;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest202*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest203 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 14081;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest203*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest204 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 14083;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest204*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest205 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 14087;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest205*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest206 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 14107;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest206*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest207 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 14143;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest207*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest208 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 14149;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest208*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest209 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 14153;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest209*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest210 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 14407;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest210*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest211 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 14411;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest211*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest212 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 14419;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest212*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest213 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 14423;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest213*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest214 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 14431;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest214*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest215 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 14437;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest215*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest216 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 14447;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest216*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest217 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 14449;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest217*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest218 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 14461;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest218*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest219 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 14479;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest219*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest220 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 14683;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest220*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest221 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 14699;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest221*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest222 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 14713;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest222*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest223 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 14717;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest223*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest224 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 14723;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest224*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest225 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 14731;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest225*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest226 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 14737;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest226*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest227 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 14741;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest227*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest228 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 14747;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest228*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest229 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 14753;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest229*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest230 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 14947;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest230*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest231 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 14951;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest231*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest232 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 14957;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest232*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest233 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 14969;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest233*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest234 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 14983;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest234*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest235 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 15013;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest235*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest236 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 15017;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest236*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest237 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 15031;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest237*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest238 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 15053;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest238*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest239 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 15061;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest239*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest240 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 15263;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest240*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest241 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 15269;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest241*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest242 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 15271;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest242*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest243 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 15277;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest243*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest244 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 15287;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest244*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest245 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 15289;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest245*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest246 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 15299;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest246*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest247 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 15307;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest247*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest248 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 15313;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest248*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest249 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 15319;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest249*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest250 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 15511;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest250*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest251 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 15527;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest251*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest252 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 15541;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest252*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest253 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 15551;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest253*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest254 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 15559;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest254*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ComponentTest255 : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Val;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 15569;
        hash = hash * 31 + Val.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ComponentTest255*)ptr;
        serializer.Stream.Serialize(&p->Val);
    }
  }
  public static unsafe partial class Constants {
  }
  public unsafe partial class Frame {
    partial void AllocGen() {
      _globals = (_globals_*)Context.Allocator.AllocAndClear(sizeof(_globals_));
    }
    partial void FreeGen() {
      Context.Allocator.Free(_globals);
    }
    partial void CopyFromGen(Frame frame) {
      Native.Utils.Copy(_globals, frame._globals, sizeof(_globals_));
    }
    partial void InitGen() {
      Initialize(this, this.SimulationConfig.Entities, 256);
      _ComponentSignalsOnAdded = new ComponentReactiveCallbackInvoker[ComponentTypeId.Type.Length];
      _ComponentSignalsOnRemoved = new ComponentReactiveCallbackInvoker[ComponentTypeId.Type.Length];
      BuildSignalsArrayOnComponentAdded<Quantum.BenchmarkSingleton>();
      BuildSignalsArrayOnComponentRemoved<Quantum.BenchmarkSingleton>();
      BuildSignalsArrayOnComponentAdded<CharacterController2D>();
      BuildSignalsArrayOnComponentRemoved<CharacterController2D>();
      BuildSignalsArrayOnComponentAdded<CharacterController3D>();
      BuildSignalsArrayOnComponentRemoved<CharacterController3D>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest021>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest021>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest022>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest022>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest023>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest023>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest024>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest024>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest025>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest025>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest026>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest026>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest027>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest027>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest028>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest028>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest029>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest029>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest030>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest030>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest031>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest031>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest032>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest032>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest033>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest033>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest034>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest034>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest035>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest035>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest036>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest036>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest037>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest037>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest038>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest038>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest039>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest039>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest040>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest040>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest041>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest041>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest042>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest042>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest043>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest043>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest044>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest044>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest045>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest045>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest046>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest046>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest047>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest047>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest048>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest048>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest049>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest049>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest050>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest050>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest051>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest051>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest052>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest052>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest053>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest053>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest054>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest054>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest055>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest055>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest056>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest056>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest057>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest057>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest058>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest058>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest059>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest059>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest060>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest060>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest061>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest061>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest062>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest062>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest063>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest063>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest064>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest064>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest065>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest065>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest066>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest066>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest067>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest067>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest068>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest068>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest069>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest069>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest070>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest070>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest071>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest071>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest072>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest072>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest073>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest073>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest074>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest074>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest075>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest075>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest076>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest076>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest077>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest077>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest078>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest078>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest079>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest079>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest080>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest080>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest081>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest081>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest082>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest082>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest083>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest083>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest084>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest084>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest085>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest085>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest086>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest086>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest087>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest087>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest088>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest088>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest089>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest089>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest090>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest090>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest091>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest091>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest092>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest092>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest093>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest093>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest094>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest094>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest095>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest095>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest096>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest096>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest097>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest097>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest098>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest098>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest099>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest099>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest100>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest100>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest101>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest101>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest102>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest102>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest103>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest103>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest104>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest104>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest105>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest105>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest106>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest106>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest107>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest107>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest108>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest108>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest109>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest109>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest110>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest110>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest111>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest111>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest112>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest112>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest113>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest113>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest114>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest114>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest115>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest115>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest116>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest116>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest117>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest117>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest118>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest118>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest119>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest119>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest120>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest120>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest121>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest121>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest122>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest122>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest123>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest123>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest124>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest124>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest125>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest125>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest126>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest126>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest127>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest127>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest128>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest128>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest129>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest129>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest130>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest130>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest131>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest131>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest132>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest132>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest133>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest133>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest134>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest134>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest135>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest135>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest136>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest136>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest137>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest137>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest138>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest138>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest139>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest139>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest140>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest140>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest141>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest141>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest142>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest142>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest143>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest143>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest144>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest144>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest145>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest145>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest146>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest146>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest147>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest147>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest148>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest148>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest149>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest149>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest150>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest150>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest151>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest151>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest152>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest152>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest153>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest153>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest154>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest154>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest155>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest155>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest156>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest156>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest157>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest157>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest158>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest158>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest159>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest159>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest160>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest160>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest161>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest161>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest162>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest162>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest163>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest163>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest164>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest164>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest165>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest165>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest166>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest166>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest167>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest167>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest168>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest168>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest169>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest169>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest170>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest170>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest171>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest171>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest172>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest172>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest173>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest173>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest174>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest174>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest175>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest175>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest176>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest176>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest177>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest177>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest178>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest178>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest179>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest179>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest180>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest180>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest181>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest181>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest182>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest182>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest183>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest183>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest184>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest184>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest185>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest185>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest186>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest186>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest187>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest187>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest188>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest188>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest189>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest189>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest190>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest190>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest191>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest191>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest192>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest192>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest193>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest193>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest194>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest194>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest195>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest195>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest196>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest196>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest197>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest197>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest198>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest198>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest199>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest199>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest200>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest200>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest201>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest201>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest202>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest202>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest203>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest203>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest204>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest204>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest205>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest205>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest206>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest206>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest207>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest207>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest208>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest208>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest209>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest209>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest210>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest210>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest211>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest211>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest212>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest212>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest213>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest213>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest214>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest214>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest215>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest215>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest216>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest216>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest217>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest217>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest218>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest218>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest219>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest219>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest220>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest220>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest221>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest221>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest222>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest222>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest223>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest223>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest224>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest224>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest225>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest225>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest226>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest226>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest227>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest227>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest228>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest228>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest229>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest229>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest230>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest230>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest231>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest231>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest232>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest232>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest233>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest233>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest234>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest234>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest235>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest235>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest236>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest236>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest237>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest237>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest238>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest238>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest239>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest239>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest240>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest240>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest241>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest241>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest242>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest242>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest243>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest243>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest244>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest244>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest245>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest245>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest246>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest246>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest247>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest247>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest248>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest248>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest249>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest249>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest250>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest250>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest251>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest251>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest252>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest252>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest253>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest253>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest254>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest254>();
      BuildSignalsArrayOnComponentAdded<Quantum.ComponentTest255>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ComponentTest255>();
      BuildSignalsArrayOnComponentAdded<MapEntityLink>();
      BuildSignalsArrayOnComponentRemoved<MapEntityLink>();
      BuildSignalsArrayOnComponentAdded<NavMeshAvoidanceAgent>();
      BuildSignalsArrayOnComponentRemoved<NavMeshAvoidanceAgent>();
      BuildSignalsArrayOnComponentAdded<NavMeshAvoidanceObstacle>();
      BuildSignalsArrayOnComponentRemoved<NavMeshAvoidanceObstacle>();
      BuildSignalsArrayOnComponentAdded<NavMeshPathfinder>();
      BuildSignalsArrayOnComponentRemoved<NavMeshPathfinder>();
      BuildSignalsArrayOnComponentAdded<NavMeshSteeringAgent>();
      BuildSignalsArrayOnComponentRemoved<NavMeshSteeringAgent>();
      BuildSignalsArrayOnComponentAdded<PhysicsBody2D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsBody2D>();
      BuildSignalsArrayOnComponentAdded<PhysicsBody3D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsBody3D>();
      BuildSignalsArrayOnComponentAdded<PhysicsCallbacks2D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsCallbacks2D>();
      BuildSignalsArrayOnComponentAdded<PhysicsCallbacks3D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsCallbacks3D>();
      BuildSignalsArrayOnComponentAdded<PhysicsCollider2D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsCollider2D>();
      BuildSignalsArrayOnComponentAdded<PhysicsCollider3D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsCollider3D>();
      BuildSignalsArrayOnComponentAdded<PhysicsJoints2D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsJoints2D>();
      BuildSignalsArrayOnComponentAdded<PhysicsJoints3D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsJoints3D>();
      BuildSignalsArrayOnComponentAdded<Transform2D>();
      BuildSignalsArrayOnComponentRemoved<Transform2D>();
      BuildSignalsArrayOnComponentAdded<Transform2DVertical>();
      BuildSignalsArrayOnComponentRemoved<Transform2DVertical>();
      BuildSignalsArrayOnComponentAdded<Transform3D>();
      BuildSignalsArrayOnComponentRemoved<Transform3D>();
      BuildSignalsArrayOnComponentAdded<View>();
      BuildSignalsArrayOnComponentRemoved<View>();
    }
    partial void SetPlayerInputCodeGen(PlayerRef player, Input input) {
      if ((int)player >= (int)_globals->input.Length) { throw new System.ArgumentOutOfRangeException("player"); }
      var i = _globals->input.GetPointer(player);
      i->samples = input.samples;
      i->grown = input.grown;
      i->max = input.max;
      i->runnig = input.runnig;
    }
    public Input* GetPlayerInput(PlayerRef player) {
      if ((int)player >= (int)_globals->input.Length) { throw new System.ArgumentOutOfRangeException("player"); }
      return _globals->input.GetPointer(player);
    }
    partial void GetPlayerLastConnectionStateCodeGen(ref BitSetRef bitSet) {
      bitSet = new(_globals->PlayerLastConnectionState.Bits, _globals->PlayerLastConnectionState.Length);
    }
    partial void ResetPhysicsCodeGen() {
      var trackedMap2D = Physics2D.Map;
      if (trackedMap2D != null && trackedMap2D.Guid.IsDynamic) Physics2D.ResetMap();
      Physics2D.Init(_globals->PhysicsState2D.MapStaticCollidersState.TrackedMap);
      var trackedMap3D = Physics3D.Map;
      if (trackedMap3D != null && trackedMap3D.Guid.IsDynamic) Physics3D.ResetMap();
      Physics3D.Init(_globals->PhysicsState3D.MapStaticCollidersState.TrackedMap);
    }
    public unsafe partial struct FrameSignals {
    }
  }
  public unsafe partial class Statics {
    public static FrameSerializer.Delegate SerializeInput;
    static partial void InitStaticDelegatesGen() {
      SerializeInput = Quantum.Input.Serialize;
    }
    static partial void RegisterSimulationTypesGen(TypeRegistry typeRegistry) {
      typeRegistry.Register(typeof(AssetGuid), AssetGuid.SIZE);
      typeRegistry.Register(typeof(AssetRef), AssetRef.SIZE);
      typeRegistry.Register(typeof(Quantum.BenchmarkSingleton), Quantum.BenchmarkSingleton.SIZE);
      typeRegistry.Register(typeof(Quantum.BitSet1024), Quantum.BitSet1024.SIZE);
      typeRegistry.Register(typeof(Quantum.BitSet128), Quantum.BitSet128.SIZE);
      typeRegistry.Register(typeof(Quantum.BitSet2048), Quantum.BitSet2048.SIZE);
      typeRegistry.Register(typeof(Quantum.BitSet256), Quantum.BitSet256.SIZE);
      typeRegistry.Register(typeof(Quantum.BitSet4096), Quantum.BitSet4096.SIZE);
      typeRegistry.Register(typeof(Quantum.BitSet512), Quantum.BitSet512.SIZE);
      typeRegistry.Register(typeof(Quantum.BitSet6), Quantum.BitSet6.SIZE);
      typeRegistry.Register(typeof(Button), Button.SIZE);
      typeRegistry.Register(typeof(CharacterController2D), CharacterController2D.SIZE);
      typeRegistry.Register(typeof(CharacterController3D), CharacterController3D.SIZE);
      typeRegistry.Register(typeof(ColorRGBA), ColorRGBA.SIZE);
      typeRegistry.Register(typeof(ComponentPrototypeRef), ComponentPrototypeRef.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest021), Quantum.ComponentTest021.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest022), Quantum.ComponentTest022.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest023), Quantum.ComponentTest023.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest024), Quantum.ComponentTest024.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest025), Quantum.ComponentTest025.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest026), Quantum.ComponentTest026.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest027), Quantum.ComponentTest027.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest028), Quantum.ComponentTest028.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest029), Quantum.ComponentTest029.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest030), Quantum.ComponentTest030.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest031), Quantum.ComponentTest031.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest032), Quantum.ComponentTest032.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest033), Quantum.ComponentTest033.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest034), Quantum.ComponentTest034.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest035), Quantum.ComponentTest035.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest036), Quantum.ComponentTest036.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest037), Quantum.ComponentTest037.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest038), Quantum.ComponentTest038.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest039), Quantum.ComponentTest039.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest040), Quantum.ComponentTest040.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest041), Quantum.ComponentTest041.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest042), Quantum.ComponentTest042.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest043), Quantum.ComponentTest043.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest044), Quantum.ComponentTest044.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest045), Quantum.ComponentTest045.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest046), Quantum.ComponentTest046.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest047), Quantum.ComponentTest047.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest048), Quantum.ComponentTest048.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest049), Quantum.ComponentTest049.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest050), Quantum.ComponentTest050.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest051), Quantum.ComponentTest051.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest052), Quantum.ComponentTest052.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest053), Quantum.ComponentTest053.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest054), Quantum.ComponentTest054.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest055), Quantum.ComponentTest055.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest056), Quantum.ComponentTest056.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest057), Quantum.ComponentTest057.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest058), Quantum.ComponentTest058.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest059), Quantum.ComponentTest059.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest060), Quantum.ComponentTest060.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest061), Quantum.ComponentTest061.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest062), Quantum.ComponentTest062.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest063), Quantum.ComponentTest063.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest064), Quantum.ComponentTest064.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest065), Quantum.ComponentTest065.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest066), Quantum.ComponentTest066.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest067), Quantum.ComponentTest067.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest068), Quantum.ComponentTest068.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest069), Quantum.ComponentTest069.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest070), Quantum.ComponentTest070.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest071), Quantum.ComponentTest071.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest072), Quantum.ComponentTest072.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest073), Quantum.ComponentTest073.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest074), Quantum.ComponentTest074.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest075), Quantum.ComponentTest075.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest076), Quantum.ComponentTest076.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest077), Quantum.ComponentTest077.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest078), Quantum.ComponentTest078.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest079), Quantum.ComponentTest079.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest080), Quantum.ComponentTest080.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest081), Quantum.ComponentTest081.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest082), Quantum.ComponentTest082.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest083), Quantum.ComponentTest083.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest084), Quantum.ComponentTest084.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest085), Quantum.ComponentTest085.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest086), Quantum.ComponentTest086.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest087), Quantum.ComponentTest087.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest088), Quantum.ComponentTest088.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest089), Quantum.ComponentTest089.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest090), Quantum.ComponentTest090.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest091), Quantum.ComponentTest091.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest092), Quantum.ComponentTest092.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest093), Quantum.ComponentTest093.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest094), Quantum.ComponentTest094.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest095), Quantum.ComponentTest095.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest096), Quantum.ComponentTest096.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest097), Quantum.ComponentTest097.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest098), Quantum.ComponentTest098.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest099), Quantum.ComponentTest099.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest100), Quantum.ComponentTest100.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest101), Quantum.ComponentTest101.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest102), Quantum.ComponentTest102.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest103), Quantum.ComponentTest103.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest104), Quantum.ComponentTest104.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest105), Quantum.ComponentTest105.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest106), Quantum.ComponentTest106.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest107), Quantum.ComponentTest107.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest108), Quantum.ComponentTest108.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest109), Quantum.ComponentTest109.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest110), Quantum.ComponentTest110.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest111), Quantum.ComponentTest111.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest112), Quantum.ComponentTest112.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest113), Quantum.ComponentTest113.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest114), Quantum.ComponentTest114.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest115), Quantum.ComponentTest115.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest116), Quantum.ComponentTest116.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest117), Quantum.ComponentTest117.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest118), Quantum.ComponentTest118.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest119), Quantum.ComponentTest119.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest120), Quantum.ComponentTest120.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest121), Quantum.ComponentTest121.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest122), Quantum.ComponentTest122.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest123), Quantum.ComponentTest123.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest124), Quantum.ComponentTest124.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest125), Quantum.ComponentTest125.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest126), Quantum.ComponentTest126.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest127), Quantum.ComponentTest127.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest128), Quantum.ComponentTest128.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest129), Quantum.ComponentTest129.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest130), Quantum.ComponentTest130.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest131), Quantum.ComponentTest131.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest132), Quantum.ComponentTest132.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest133), Quantum.ComponentTest133.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest134), Quantum.ComponentTest134.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest135), Quantum.ComponentTest135.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest136), Quantum.ComponentTest136.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest137), Quantum.ComponentTest137.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest138), Quantum.ComponentTest138.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest139), Quantum.ComponentTest139.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest140), Quantum.ComponentTest140.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest141), Quantum.ComponentTest141.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest142), Quantum.ComponentTest142.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest143), Quantum.ComponentTest143.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest144), Quantum.ComponentTest144.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest145), Quantum.ComponentTest145.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest146), Quantum.ComponentTest146.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest147), Quantum.ComponentTest147.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest148), Quantum.ComponentTest148.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest149), Quantum.ComponentTest149.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest150), Quantum.ComponentTest150.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest151), Quantum.ComponentTest151.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest152), Quantum.ComponentTest152.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest153), Quantum.ComponentTest153.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest154), Quantum.ComponentTest154.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest155), Quantum.ComponentTest155.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest156), Quantum.ComponentTest156.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest157), Quantum.ComponentTest157.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest158), Quantum.ComponentTest158.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest159), Quantum.ComponentTest159.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest160), Quantum.ComponentTest160.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest161), Quantum.ComponentTest161.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest162), Quantum.ComponentTest162.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest163), Quantum.ComponentTest163.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest164), Quantum.ComponentTest164.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest165), Quantum.ComponentTest165.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest166), Quantum.ComponentTest166.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest167), Quantum.ComponentTest167.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest168), Quantum.ComponentTest168.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest169), Quantum.ComponentTest169.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest170), Quantum.ComponentTest170.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest171), Quantum.ComponentTest171.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest172), Quantum.ComponentTest172.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest173), Quantum.ComponentTest173.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest174), Quantum.ComponentTest174.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest175), Quantum.ComponentTest175.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest176), Quantum.ComponentTest176.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest177), Quantum.ComponentTest177.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest178), Quantum.ComponentTest178.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest179), Quantum.ComponentTest179.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest180), Quantum.ComponentTest180.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest181), Quantum.ComponentTest181.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest182), Quantum.ComponentTest182.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest183), Quantum.ComponentTest183.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest184), Quantum.ComponentTest184.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest185), Quantum.ComponentTest185.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest186), Quantum.ComponentTest186.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest187), Quantum.ComponentTest187.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest188), Quantum.ComponentTest188.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest189), Quantum.ComponentTest189.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest190), Quantum.ComponentTest190.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest191), Quantum.ComponentTest191.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest192), Quantum.ComponentTest192.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest193), Quantum.ComponentTest193.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest194), Quantum.ComponentTest194.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest195), Quantum.ComponentTest195.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest196), Quantum.ComponentTest196.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest197), Quantum.ComponentTest197.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest198), Quantum.ComponentTest198.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest199), Quantum.ComponentTest199.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest200), Quantum.ComponentTest200.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest201), Quantum.ComponentTest201.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest202), Quantum.ComponentTest202.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest203), Quantum.ComponentTest203.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest204), Quantum.ComponentTest204.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest205), Quantum.ComponentTest205.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest206), Quantum.ComponentTest206.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest207), Quantum.ComponentTest207.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest208), Quantum.ComponentTest208.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest209), Quantum.ComponentTest209.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest210), Quantum.ComponentTest210.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest211), Quantum.ComponentTest211.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest212), Quantum.ComponentTest212.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest213), Quantum.ComponentTest213.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest214), Quantum.ComponentTest214.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest215), Quantum.ComponentTest215.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest216), Quantum.ComponentTest216.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest217), Quantum.ComponentTest217.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest218), Quantum.ComponentTest218.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest219), Quantum.ComponentTest219.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest220), Quantum.ComponentTest220.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest221), Quantum.ComponentTest221.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest222), Quantum.ComponentTest222.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest223), Quantum.ComponentTest223.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest224), Quantum.ComponentTest224.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest225), Quantum.ComponentTest225.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest226), Quantum.ComponentTest226.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest227), Quantum.ComponentTest227.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest228), Quantum.ComponentTest228.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest229), Quantum.ComponentTest229.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest230), Quantum.ComponentTest230.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest231), Quantum.ComponentTest231.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest232), Quantum.ComponentTest232.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest233), Quantum.ComponentTest233.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest234), Quantum.ComponentTest234.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest235), Quantum.ComponentTest235.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest236), Quantum.ComponentTest236.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest237), Quantum.ComponentTest237.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest238), Quantum.ComponentTest238.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest239), Quantum.ComponentTest239.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest240), Quantum.ComponentTest240.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest241), Quantum.ComponentTest241.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest242), Quantum.ComponentTest242.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest243), Quantum.ComponentTest243.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest244), Quantum.ComponentTest244.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest245), Quantum.ComponentTest245.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest246), Quantum.ComponentTest246.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest247), Quantum.ComponentTest247.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest248), Quantum.ComponentTest248.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest249), Quantum.ComponentTest249.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest250), Quantum.ComponentTest250.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest251), Quantum.ComponentTest251.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest252), Quantum.ComponentTest252.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest253), Quantum.ComponentTest253.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest254), Quantum.ComponentTest254.SIZE);
      typeRegistry.Register(typeof(Quantum.ComponentTest255), Quantum.ComponentTest255.SIZE);
      typeRegistry.Register(typeof(ComponentTypeRef), ComponentTypeRef.SIZE);
      typeRegistry.Register(typeof(DistanceJoint), DistanceJoint.SIZE);
      typeRegistry.Register(typeof(DistanceJoint3D), DistanceJoint3D.SIZE);
      typeRegistry.Register(typeof(EntityPrototypeRef), EntityPrototypeRef.SIZE);
      typeRegistry.Register(typeof(EntityRef), EntityRef.SIZE);
      typeRegistry.Register(typeof(FP), FP.SIZE);
      typeRegistry.Register(typeof(FPBounds2), FPBounds2.SIZE);
      typeRegistry.Register(typeof(FPBounds3), FPBounds3.SIZE);
      typeRegistry.Register(typeof(FPMatrix2x2), FPMatrix2x2.SIZE);
      typeRegistry.Register(typeof(FPMatrix3x3), FPMatrix3x3.SIZE);
      typeRegistry.Register(typeof(FPMatrix4x4), FPMatrix4x4.SIZE);
      typeRegistry.Register(typeof(FPQuaternion), FPQuaternion.SIZE);
      typeRegistry.Register(typeof(FPVector2), FPVector2.SIZE);
      typeRegistry.Register(typeof(FPVector3), FPVector3.SIZE);
      typeRegistry.Register(typeof(FrameMetaData), FrameMetaData.SIZE);
      typeRegistry.Register(typeof(HingeJoint), HingeJoint.SIZE);
      typeRegistry.Register(typeof(HingeJoint3D), HingeJoint3D.SIZE);
      typeRegistry.Register(typeof(Hit), Hit.SIZE);
      typeRegistry.Register(typeof(Hit3D), Hit3D.SIZE);
      typeRegistry.Register(typeof(Quantum.Input), Quantum.Input.SIZE);
      typeRegistry.Register(typeof(Quantum.InputButtons), 4);
      typeRegistry.Register(typeof(Joint), Joint.SIZE);
      typeRegistry.Register(typeof(Joint3D), Joint3D.SIZE);
      typeRegistry.Register(typeof(LayerMask), LayerMask.SIZE);
      typeRegistry.Register(typeof(MapEntityId), MapEntityId.SIZE);
      typeRegistry.Register(typeof(MapEntityLink), MapEntityLink.SIZE);
      typeRegistry.Register(typeof(NavMeshAvoidanceAgent), NavMeshAvoidanceAgent.SIZE);
      typeRegistry.Register(typeof(NavMeshAvoidanceObstacle), NavMeshAvoidanceObstacle.SIZE);
      typeRegistry.Register(typeof(NavMeshPathfinder), NavMeshPathfinder.SIZE);
      typeRegistry.Register(typeof(NavMeshRegionMask), NavMeshRegionMask.SIZE);
      typeRegistry.Register(typeof(NavMeshSteeringAgent), NavMeshSteeringAgent.SIZE);
      typeRegistry.Register(typeof(NullableFP), NullableFP.SIZE);
      typeRegistry.Register(typeof(NullableFPVector2), NullableFPVector2.SIZE);
      typeRegistry.Register(typeof(NullableFPVector3), NullableFPVector3.SIZE);
      typeRegistry.Register(typeof(NullableNonNegativeFP), NullableNonNegativeFP.SIZE);
      typeRegistry.Register(typeof(PhysicsBody2D), PhysicsBody2D.SIZE);
      typeRegistry.Register(typeof(PhysicsBody3D), PhysicsBody3D.SIZE);
      typeRegistry.Register(typeof(PhysicsCallbacks2D), PhysicsCallbacks2D.SIZE);
      typeRegistry.Register(typeof(PhysicsCallbacks3D), PhysicsCallbacks3D.SIZE);
      typeRegistry.Register(typeof(PhysicsCollider2D), PhysicsCollider2D.SIZE);
      typeRegistry.Register(typeof(PhysicsCollider3D), PhysicsCollider3D.SIZE);
      typeRegistry.Register(typeof(PhysicsEngineState), PhysicsEngineState.SIZE);
      typeRegistry.Register(typeof(PhysicsJoints2D), PhysicsJoints2D.SIZE);
      typeRegistry.Register(typeof(PhysicsJoints3D), PhysicsJoints3D.SIZE);
      typeRegistry.Register(typeof(PhysicsQueryRef), PhysicsQueryRef.SIZE);
      typeRegistry.Register(typeof(PhysicsSceneSettings), PhysicsSceneSettings.SIZE);
      typeRegistry.Register(typeof(PlayerRef), PlayerRef.SIZE);
      typeRegistry.Register(typeof(Ptr), Ptr.SIZE);
      typeRegistry.Register(typeof(QBoolean), QBoolean.SIZE);
      typeRegistry.Register(typeof(Quantum.QStringUtf8_1024), Quantum.QStringUtf8_1024.SIZE);
      typeRegistry.Register(typeof(Quantum.QStringUtf8_128), Quantum.QStringUtf8_128.SIZE);
      typeRegistry.Register(typeof(Quantum.QStringUtf8_512), Quantum.QStringUtf8_512.SIZE);
      typeRegistry.Register(typeof(Quantum.Ptr), Quantum.Ptr.SIZE);
      typeRegistry.Register(typeof(RNGSession), RNGSession.SIZE);
      typeRegistry.Register(typeof(Shape2D), Shape2D.SIZE);
      typeRegistry.Register(typeof(Shape3D), Shape3D.SIZE);
      typeRegistry.Register(typeof(SpringJoint), SpringJoint.SIZE);
      typeRegistry.Register(typeof(SpringJoint3D), SpringJoint3D.SIZE);
      typeRegistry.Register(typeof(Transform2D), Transform2D.SIZE);
      typeRegistry.Register(typeof(Transform2DVertical), Transform2DVertical.SIZE);
      typeRegistry.Register(typeof(Transform3D), Transform3D.SIZE);
      typeRegistry.Register(typeof(View), View.SIZE);
      typeRegistry.Register(typeof(Quantum._globals_), Quantum._globals_.SIZE);
    }
    static partial void InitComponentTypeIdGen() {
      ComponentTypeId.Reset(ComponentTypeId.BuiltInComponentCount + 236)
        .AddBuiltInComponents()
        .Add<Quantum.BenchmarkSingleton>(Quantum.BenchmarkSingleton.Serialize, null, null, ComponentFlags.Singleton)
        .Add<Quantum.ComponentTest021>(Quantum.ComponentTest021.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest022>(Quantum.ComponentTest022.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest023>(Quantum.ComponentTest023.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest024>(Quantum.ComponentTest024.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest025>(Quantum.ComponentTest025.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest026>(Quantum.ComponentTest026.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest027>(Quantum.ComponentTest027.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest028>(Quantum.ComponentTest028.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest029>(Quantum.ComponentTest029.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest030>(Quantum.ComponentTest030.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest031>(Quantum.ComponentTest031.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest032>(Quantum.ComponentTest032.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest033>(Quantum.ComponentTest033.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest034>(Quantum.ComponentTest034.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest035>(Quantum.ComponentTest035.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest036>(Quantum.ComponentTest036.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest037>(Quantum.ComponentTest037.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest038>(Quantum.ComponentTest038.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest039>(Quantum.ComponentTest039.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest040>(Quantum.ComponentTest040.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest041>(Quantum.ComponentTest041.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest042>(Quantum.ComponentTest042.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest043>(Quantum.ComponentTest043.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest044>(Quantum.ComponentTest044.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest045>(Quantum.ComponentTest045.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest046>(Quantum.ComponentTest046.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest047>(Quantum.ComponentTest047.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest048>(Quantum.ComponentTest048.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest049>(Quantum.ComponentTest049.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest050>(Quantum.ComponentTest050.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest051>(Quantum.ComponentTest051.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest052>(Quantum.ComponentTest052.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest053>(Quantum.ComponentTest053.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest054>(Quantum.ComponentTest054.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest055>(Quantum.ComponentTest055.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest056>(Quantum.ComponentTest056.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest057>(Quantum.ComponentTest057.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest058>(Quantum.ComponentTest058.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest059>(Quantum.ComponentTest059.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest060>(Quantum.ComponentTest060.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest061>(Quantum.ComponentTest061.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest062>(Quantum.ComponentTest062.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest063>(Quantum.ComponentTest063.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest064>(Quantum.ComponentTest064.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest065>(Quantum.ComponentTest065.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest066>(Quantum.ComponentTest066.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest067>(Quantum.ComponentTest067.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest068>(Quantum.ComponentTest068.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest069>(Quantum.ComponentTest069.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest070>(Quantum.ComponentTest070.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest071>(Quantum.ComponentTest071.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest072>(Quantum.ComponentTest072.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest073>(Quantum.ComponentTest073.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest074>(Quantum.ComponentTest074.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest075>(Quantum.ComponentTest075.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest076>(Quantum.ComponentTest076.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest077>(Quantum.ComponentTest077.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest078>(Quantum.ComponentTest078.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest079>(Quantum.ComponentTest079.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest080>(Quantum.ComponentTest080.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest081>(Quantum.ComponentTest081.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest082>(Quantum.ComponentTest082.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest083>(Quantum.ComponentTest083.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest084>(Quantum.ComponentTest084.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest085>(Quantum.ComponentTest085.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest086>(Quantum.ComponentTest086.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest087>(Quantum.ComponentTest087.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest088>(Quantum.ComponentTest088.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest089>(Quantum.ComponentTest089.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest090>(Quantum.ComponentTest090.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest091>(Quantum.ComponentTest091.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest092>(Quantum.ComponentTest092.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest093>(Quantum.ComponentTest093.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest094>(Quantum.ComponentTest094.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest095>(Quantum.ComponentTest095.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest096>(Quantum.ComponentTest096.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest097>(Quantum.ComponentTest097.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest098>(Quantum.ComponentTest098.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest099>(Quantum.ComponentTest099.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest100>(Quantum.ComponentTest100.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest101>(Quantum.ComponentTest101.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest102>(Quantum.ComponentTest102.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest103>(Quantum.ComponentTest103.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest104>(Quantum.ComponentTest104.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest105>(Quantum.ComponentTest105.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest106>(Quantum.ComponentTest106.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest107>(Quantum.ComponentTest107.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest108>(Quantum.ComponentTest108.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest109>(Quantum.ComponentTest109.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest110>(Quantum.ComponentTest110.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest111>(Quantum.ComponentTest111.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest112>(Quantum.ComponentTest112.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest113>(Quantum.ComponentTest113.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest114>(Quantum.ComponentTest114.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest115>(Quantum.ComponentTest115.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest116>(Quantum.ComponentTest116.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest117>(Quantum.ComponentTest117.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest118>(Quantum.ComponentTest118.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest119>(Quantum.ComponentTest119.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest120>(Quantum.ComponentTest120.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest121>(Quantum.ComponentTest121.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest122>(Quantum.ComponentTest122.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest123>(Quantum.ComponentTest123.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest124>(Quantum.ComponentTest124.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest125>(Quantum.ComponentTest125.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest126>(Quantum.ComponentTest126.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest127>(Quantum.ComponentTest127.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest128>(Quantum.ComponentTest128.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest129>(Quantum.ComponentTest129.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest130>(Quantum.ComponentTest130.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest131>(Quantum.ComponentTest131.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest132>(Quantum.ComponentTest132.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest133>(Quantum.ComponentTest133.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest134>(Quantum.ComponentTest134.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest135>(Quantum.ComponentTest135.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest136>(Quantum.ComponentTest136.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest137>(Quantum.ComponentTest137.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest138>(Quantum.ComponentTest138.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest139>(Quantum.ComponentTest139.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest140>(Quantum.ComponentTest140.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest141>(Quantum.ComponentTest141.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest142>(Quantum.ComponentTest142.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest143>(Quantum.ComponentTest143.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest144>(Quantum.ComponentTest144.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest145>(Quantum.ComponentTest145.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest146>(Quantum.ComponentTest146.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest147>(Quantum.ComponentTest147.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest148>(Quantum.ComponentTest148.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest149>(Quantum.ComponentTest149.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest150>(Quantum.ComponentTest150.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest151>(Quantum.ComponentTest151.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest152>(Quantum.ComponentTest152.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest153>(Quantum.ComponentTest153.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest154>(Quantum.ComponentTest154.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest155>(Quantum.ComponentTest155.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest156>(Quantum.ComponentTest156.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest157>(Quantum.ComponentTest157.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest158>(Quantum.ComponentTest158.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest159>(Quantum.ComponentTest159.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest160>(Quantum.ComponentTest160.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest161>(Quantum.ComponentTest161.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest162>(Quantum.ComponentTest162.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest163>(Quantum.ComponentTest163.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest164>(Quantum.ComponentTest164.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest165>(Quantum.ComponentTest165.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest166>(Quantum.ComponentTest166.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest167>(Quantum.ComponentTest167.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest168>(Quantum.ComponentTest168.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest169>(Quantum.ComponentTest169.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest170>(Quantum.ComponentTest170.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest171>(Quantum.ComponentTest171.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest172>(Quantum.ComponentTest172.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest173>(Quantum.ComponentTest173.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest174>(Quantum.ComponentTest174.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest175>(Quantum.ComponentTest175.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest176>(Quantum.ComponentTest176.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest177>(Quantum.ComponentTest177.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest178>(Quantum.ComponentTest178.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest179>(Quantum.ComponentTest179.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest180>(Quantum.ComponentTest180.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest181>(Quantum.ComponentTest181.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest182>(Quantum.ComponentTest182.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest183>(Quantum.ComponentTest183.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest184>(Quantum.ComponentTest184.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest185>(Quantum.ComponentTest185.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest186>(Quantum.ComponentTest186.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest187>(Quantum.ComponentTest187.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest188>(Quantum.ComponentTest188.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest189>(Quantum.ComponentTest189.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest190>(Quantum.ComponentTest190.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest191>(Quantum.ComponentTest191.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest192>(Quantum.ComponentTest192.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest193>(Quantum.ComponentTest193.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest194>(Quantum.ComponentTest194.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest195>(Quantum.ComponentTest195.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest196>(Quantum.ComponentTest196.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest197>(Quantum.ComponentTest197.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest198>(Quantum.ComponentTest198.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest199>(Quantum.ComponentTest199.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest200>(Quantum.ComponentTest200.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest201>(Quantum.ComponentTest201.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest202>(Quantum.ComponentTest202.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest203>(Quantum.ComponentTest203.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest204>(Quantum.ComponentTest204.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest205>(Quantum.ComponentTest205.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest206>(Quantum.ComponentTest206.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest207>(Quantum.ComponentTest207.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest208>(Quantum.ComponentTest208.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest209>(Quantum.ComponentTest209.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest210>(Quantum.ComponentTest210.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest211>(Quantum.ComponentTest211.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest212>(Quantum.ComponentTest212.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest213>(Quantum.ComponentTest213.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest214>(Quantum.ComponentTest214.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest215>(Quantum.ComponentTest215.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest216>(Quantum.ComponentTest216.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest217>(Quantum.ComponentTest217.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest218>(Quantum.ComponentTest218.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest219>(Quantum.ComponentTest219.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest220>(Quantum.ComponentTest220.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest221>(Quantum.ComponentTest221.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest222>(Quantum.ComponentTest222.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest223>(Quantum.ComponentTest223.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest224>(Quantum.ComponentTest224.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest225>(Quantum.ComponentTest225.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest226>(Quantum.ComponentTest226.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest227>(Quantum.ComponentTest227.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest228>(Quantum.ComponentTest228.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest229>(Quantum.ComponentTest229.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest230>(Quantum.ComponentTest230.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest231>(Quantum.ComponentTest231.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest232>(Quantum.ComponentTest232.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest233>(Quantum.ComponentTest233.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest234>(Quantum.ComponentTest234.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest235>(Quantum.ComponentTest235.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest236>(Quantum.ComponentTest236.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest237>(Quantum.ComponentTest237.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest238>(Quantum.ComponentTest238.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest239>(Quantum.ComponentTest239.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest240>(Quantum.ComponentTest240.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest241>(Quantum.ComponentTest241.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest242>(Quantum.ComponentTest242.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest243>(Quantum.ComponentTest243.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest244>(Quantum.ComponentTest244.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest245>(Quantum.ComponentTest245.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest246>(Quantum.ComponentTest246.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest247>(Quantum.ComponentTest247.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest248>(Quantum.ComponentTest248.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest249>(Quantum.ComponentTest249.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest250>(Quantum.ComponentTest250.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest251>(Quantum.ComponentTest251.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest252>(Quantum.ComponentTest252.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest253>(Quantum.ComponentTest253.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest254>(Quantum.ComponentTest254.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ComponentTest255>(Quantum.ComponentTest255.Serialize, null, null, ComponentFlags.None)
        .Finish();
    }
    [Preserve()]
    public static void EnsureNotStrippedGen() {
      FramePrinter.EnsureNotStripped();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.InputButtons>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.QStringUtf8_1024>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.QStringUtf8_128>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.QStringUtf8_512>();
    }
  }
}
#pragma warning restore 0109
#pragma warning restore 1591
